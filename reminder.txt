char* const means that you can't change the address the pointer is pointing to.
const char * means that you can't change the elements that this pointer is pointing to.

ABI=application binary interface
Application Binary Interface (ABI) similar to API, but the function is not accessible to the caller at source code level.
only a binary representation is accessible/available.

making a function static encapsulates it. it cannot be seen by a linker, so that its not available for other objects.

gets : can cause buffer overflows.
scanf : for strings it would be better to use fgets (followed by self parsing using sscanf or strchr).
sprintf (instead use snprintf)
there is no such thing as snscanf. just use the tostr(x) macro to limit it!(test86.c)
strcat : avoid it when dealing with user input (instead use strncat, even if strncat has its pitfalls.)
strcpy : avoid it when dealing with user input (instead use strncpy, even if strncopy has its pitfalls.)
strtok : is not thread safe.

for scanf, use %lg for getting the result in double. %g in float. if opposite, bad shit will happen.(test87.c)

fputs is better than fprintf if you want the EXACT data to be printed out.

arrays and structures are different!!!
	array: int **arr => arr[][]
	structure: struct *arr => arr[].stuff (no **arr)
	
text mode: fputc(character, IO), fputs(string, buffercount, IO), fprintf(IO, string, param), fgetc, fgets, fscanf
binary mode: fread, fwrite


==========compiler stuff=================

preprocessor output to stdout: gcc -E
^where it looks: gcc -v (use this for readability: gcc -v 2>&1 | sed -e 's/ --/\n--/g')
link directory: gcc -L [path]
include directory: gcc -I [path]

assembly: gcc -S (use -O0 to get the pure unoptimized output)
create object: gcc -c (everything is checked)
link objects: gcc [objects] (thats it.)
executable name: gcc -o [name]

these are done to reduce compile time when working on a huge project.

the most portable code(no GNU extensions such as asm, inline, typeof, unix and vax): gcc -pedantic -ansi

gcc -Werror: treat all warnings as errors.
gcc -Wno-???: disable the specific '???' warning.

how to test my program using profiler:
http://web.archive.org/web/20141129061523/http://www.cs.utah.edu/dept/old/texinfo/as/gprof.html#SEC2